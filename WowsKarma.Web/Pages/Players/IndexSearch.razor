@page "/player"
@inject PlayerService PlayerService

<div class="col-md-6">
	<h1 class="mb-3">Search Players</h1>

	<EditForm Model="CurrentSearch" OnValidSubmit="HandleValidSubmitAsync">
		<DataAnnotationsValidator />
		<ValidationSummary />

		<div class="input-group">
			<InputText id="search-player" class="form-control" @bind-Value="CurrentSearch.Search" DisplayName="Search" placeholder="Username" />
			<button type="submit" class="btn btn-primary px-3">Search</button>
		</div>
	</EditForm>
</div>

<CircuitBreakerSection @ref="_breakerSection" DisplayTripped>
	<ChildContent>
		@if (AccountsResults is not null)
		{
			<div class="mx-3 my-5">
				@if (AccountsResults.Count() is not 0)
				{
					<h4 class="text-success mb-3">Found @AccountsResults.Count() Account(s) :</h4>
					                                                                        
					<ul>
						@foreach ((uint id, string username) in AccountsResults)
						{
							<li><a href="/player/@id,@username/">@username</a></li>
						}
					</ul>
				}
				else
				{
					<h4 class="text-warning">No Results found. Try again.</h4>
				}
			</div>
		}
		else if (Searching)
		{
			<h4 class="text-info my-5">Searching...</h4>
		}
	</ChildContent>
	
	<ErrorContent>
		<h3 class="text-danger my-5">An error occured while loading results.</h3>
	</ErrorContent>
</CircuitBreakerSection>



@code {

	public IEnumerable<AccountListingDTO> AccountsResults { get; set; }

	[Parameter]
	public SearchModel CurrentSearch { get; set; } = new();

	public bool Searching { get; private set; }

	private CircuitBreakerSection _breakerSection = new();
	
	protected async Task HandleValidSubmitAsync()
	{
		try
		{
			Searching = true;
			_breakerSection.Recover();
			AccountsResults = null;

			AccountsResults = (CurrentSearch.Search is null or { Length: > 2 }
				? await PlayerService.SearchPlayersAsync(CurrentSearch.Search) : null)
				?? Array.Empty<AccountListingDTO>();
		
			Searching = false;
		}
		catch (Exception e)
		{
			await _breakerSection.TripExceptionAsync(e);
		}
	}

	public record SearchModel
	{
		[MinLength(3)]
		public string Search { get; set; }
	}


}
