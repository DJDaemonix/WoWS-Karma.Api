@inherits ComponentBaseAuth

@page "/player/{idnamepair}/"
@using WowsKarma.Web.Pages.Posts

@inject PlayerService PlayerService
@inject UserService UserService

@if (Player is not null)
{
	<div class="text-center mb-5">
		<h1>
			@if (Player.Clan is not null)
			{
				<a style="color: #@Player.Clan.LeagueColorHex;" href=@($"/clan/{Player.Clan.Id},{Player.Clan.Tag}-{Player.Clan.Name}") tooltip="@Player.Clan.Name">[@Player.Clan.Tag]</a>
			}
			
			<span class="mx-3">@Player.Username</span>
			<sup class="text-@GetKarmaColor(TotalKarma)">@TotalKarma</sup>
		</h1>
	</div>

	<div class="row justify-content-center text-center my-5">
		<div class="col-4 m-4">
			<h4>In-Game :</h4>
			@if (Player.Hidden)
			{
				<h2 class="text-danger">N/A</h2>
			}
			else
			{
				<h2 class="text-@GetKarmaColor(Player.GameKarma)">@Player.GameKarma</h2>
			}
		</div>

		<div class="col-4 m-4">
			<h4>Platform :</h4>
			@if (Player.OptedOut)
			{
				<h2 class="text-danger">N/A</h2>
			}
			else
			{
				<h2 class="text-@GetKarmaColor(Player.SiteKarma)">@Player.SiteKarma</h2>
			}
		</div>
	</div>


	<div class="row justify-content-between">
		<div class="col-md-6 mb-3">
			<h2 class="text-center mb-3">Info</h2>

			<table class="table table-borderless">
				<thead />
				<tbody>
					<tr><th>Account ID :</th><td>@Player.Id</td></tr>

					@if (!Player.Hidden)
					{
						<tr><th>Created On :</th><td>@Player.WgAccountCreatedAt.ToString("f")</td></tr>
						<tr><th>Last Battle :</th><td>@Player.LastBattleTime.ToString("f")</td></tr>
						<tr><th>Statistics :</th><td><a target="_blank" href="@($"{GetWowsNumbersBaseLink()}player/{IdNamePair}/")">View on WOWS Numbers</a></td></tr>
					}
				</tbody>
			</table>

			@if (Player.Hidden)
			{
				<h3 class="text-danger">Player Details Hidden</h3>
			}
		</div>

		<div class="col-md-6 mb-3">
			@if (Player.OptedOut)
			{
				<h3 class="text-danger">Player has opted out.</h3>
			}
			else
			{
				<h2 class="text-center mb-5">Ratings</h2>

				<div class="row justify-content-around text-center">
					<div class="col-4">
						<h3 class="text-@GetKarmaColor(Player.RatingPerformance)">@Player.RatingPerformance</h3>
						<h5>Performance</h5>
					</div>
					<div class="col-4">
						<h3 class="text-@GetKarmaColor(Player.RatingTeamplay)">@Player.RatingTeamplay</h3>
						<h5>Teamplay</h5>
					</div>
					<div class="col-4">
						<h3 class="text-@GetKarmaColor(Player.RatingCourtesy)">@Player.RatingCourtesy</h3>
						<h5>Courtesy</h5>
					</div>
				</div>
			}
		</div>
	</div>

	<hr class="m-3" />

	<div class="row my-4 justify-content-between">
		<div class="col-auto">
			<h2 class="mx-5">Posts</h2>
		</div>

		<div class="col">
			<nav class="nav nav-pills nav-justified">
				@if (!Player.OptedOut || Player.Id == CurrentUser.Id || (ClaimsPrincipal?.IsInRole(ApiRoles.CM) ?? false))
				{
					<a class="nav-item nav-link @(ReceivedOrSent ? "" : "active")" @onclick=@(() => ReceivedOrSent = false)>Received</a>
				}

				<a class="nav-item nav-link @(ReceivedOrSent ? "active" : "")" @onclick=@(() => ReceivedOrSent = true)>Sent</a>
			</nav>
		</div>
	</div>

	@if (!ReceivedOrSent)
	{
		<CircuitBreakerSection @ref="_receivedPostsOuterBreaker" DisplayTripped>
			<ChildContent>
				<PostsReceived AccountId=Player.Id OnPostsUpdate=UpdatePlayerAsync AuthorProfileFlags=CurrentUserProfileFlags />
			</ChildContent>
			
			<ErrorContent>
				<h4 class="text-danger">An error occured while loading received posts.</h4>
			</ErrorContent>
		</CircuitBreakerSection>
	}
	else
	{
		<CircuitBreakerSection @ref="_receivedPostsOuterBreaker" DisplayTripped>
			<ChildContent>
				<PostsSent AccountId=Player.Id />
			</ChildContent>
            			
            <ErrorContent>
            	<h4 class="text-danger">An error occured while loading sent posts.</h4>
            </ErrorContent>
        </CircuitBreakerSection>
	}
}
else if (Loaded)
{
	<h4 class="text-warning">Player not found.</h4>
}
else
{
	<h4 class="text-info">Loading...</h4>
}


@code {
	[Parameter]
	public string IdNamePair { get; set; }

	public int TotalKarma => Player.GameKarma + Player.SiteKarma;
	public PlayerClanProfileDTO Player { get; set; }
	public UserProfileFlagsDTO CurrentUserProfileFlags { get; set; }


	public bool Loaded { get; private set; }
	public bool ReceivedOrSent { get; set; }

	private CircuitBreakerSection _receivedPostsOuterBreaker, _sentPostsOuterBreaker;
	
	protected override async Task OnParametersSetAsync()
	{
		Loaded = false;
		_receivedPostsOuterBreaker = new();
		_sentPostsOuterBreaker = new();
		
		uint id = GetIdFromRouteParameter(IdNamePair);
		Player = id is 0 ? null : await PlayerService.FetchPlayerProfileAsync(id);
		await base.OnParametersSetAsync();
		ReceivedOrSent = Player.OptedOut; // Lock on "Sent" if player has opted out
		await CheckBannedUserAsync();
		
		Loaded = true;
	}

	private async Task UpdatePlayerAsync() => Player = await PlayerService.FetchPlayerProfileAsync(Player.Id);

	private async Task CheckBannedUserAsync() => CurrentUserProfileFlags = CurrentUser.Id is not 0
		? await UserService.GetUserProfileFlagsAsync(CurrentUser.Id)
		: null;
}
