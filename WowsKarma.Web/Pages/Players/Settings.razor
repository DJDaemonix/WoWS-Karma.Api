@inherits ComponentBaseAuth

@page "/settings"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject UserService UserService

@using System.IdentityModel.Tokens.Jwt



<h1 class="mb-5">Settings</h1>

<AuthorizeView Context="AuthContext">
	<Authorized>
		@if (Loaded)
		{
			@if (Saved)
			{
				<div class="alert alert-success alert-dismissible fade show" role="alert">
					Your changes have been saved.

					<button type="button" class="close" data-dismiss="alert" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
			}

	<EditForm Model=model Context="EditContext" OnValidSubmit=SaveUserSettingsAsync>
		<h1 class="mb-5 text-danger">Danger Zone</h1>

		<div class="row align-content-between mb-5">
			<div class="col-md my-3">
				<h3 class="mb-3">Opt Out</h3>

				<p>
					Opting out of WOWS Karma publicly hides your on-site Metrics and Received posts. <br />
					In counterpart, you will no longer be able to Post on other profiles, but your existing posts will still remain.
				</p>

				<p>Please note that a WOWS Karma opt-out is independent of your Wargaming account's visibility settings.</p>

				@if (optOutOnCooldown)
				{
					<p class="text-muted font-italic">Opt-Out change is currently on Cooldown. <br />You may update this again, past @($"{OptOutCooldownClearedOn}").</p>
				}

				<div class="form-check form-control-lg">
					<InputCheckbox class="form-check-input" disabled=@optOutOnCooldown @bind-Value=model.OptedOut />
					<label class="form-check-label lead text-danger">Opt Out of WOWS Karma</label>
				</div>
			</div>
		</div>


		<h3>Authentication</h3>

		<div class="row align-content-between">
			<div class="col-md my-4">
				<h4 class="my-3">Personal Token</h4>

				<p>
					This token is the base of access to WOWS Karma's API system.
					You can use it in conjunction with your apps to use certain authenticated HTTP methods.
				</p>

				<p>
					A token expires after a certain period of time, currently set to <b>8 days</b>. <br />
					Your current token will expire on: <b>@($"{parsedToken.ValidTo:g}")</b>.
				</p>

				<div>
					<button type="button" class="btn btn-primary my-3" @onclick=CopyTokenToClipboard><i class="bi bi-clipboard mr-2"></i>Copy Token</button>

					@if (copiedToken)
					{
						<p class="text-success font-italic">Token copied to clipboard!</p>
					}
				</div>

				<p class="text-warning">
					Be extra careful manipulating authentication settings, as your token is the key to your account on WOWS Karma.
					Please make sure to not reveal your token.
				</p>
			</div>

			<div class="col-md my-4">
				<h4 class="my-3">Reset Seed</h4>

				<p>
					Resetting your seed has the effect of invalidating all issued tokens, and resetting all logged-in devices.
					You can use this in case you suspect your token has been compromised, allowing you to start on a new seed.
				</p>

				<button type="button" class="btn btn-danger my-3" @onclick="() => showSeedModal = true"><i class="bi bi-arrow-repeat mr-2"></i>Reset Seed</button>
			</div>
		</div>

		<button type="submit" class="btn btn-primary px-3 mt-5">Save</button>
	</EditForm>

			@if (showSeedModal)
			{
				<SeedTokenConfirm OnConfirm=RenewSeedToken OnCancel="() => showSeedModal = false" />
			}
		}
		else
		{
			<h3 class="text-info">Loading...</h3>
		}
	</Authorized>

	<NotAuthorized>
		@{ string redirectUri = NavigationManager.ToBaseRelativePath(NavigationManager.Uri); }
		<h3>Please first <NavLink href=@($"/login?redirectUri={redirectUri}")>Login</NavLink> to update your user settings.</h3>
	</NotAuthorized>
</AuthorizeView>



@code {
	public bool Loaded { get; private set; }
	public bool Saved { get; private set; }

	private JwtSecurityToken parsedToken;
	private bool copiedToken;

	private bool showSeedModal;

	private bool optOutOnCooldown;
	private DateTimeOffset OptOutCooldownClearedOn => model.OptOutChanged.AddDays(7); 

	private ProfileSettingsViewModel model;

	protected override async Task OnParametersSetAsync()
	{
		Loaded = false;
		await base.OnParametersSetAsync();

		if (CurrentUser is not null)
		{
			await LoadUserSettingsAsync();
			parsedToken = ParseToken(CurrentToken);
		}

		Loaded = true;
	}

	private async Task LoadUserSettingsAsync()
	{
		UserProfileFlagsDTO current = await UserService.GetUserProfileFlagsAsync(CurrentUser.Id);
		model = current.Adapt<ProfileSettingsViewModel>();
		optOutOnCooldown = OptOutCooldownClearedOn > DateTime.Now;
	}

	private async Task SaveUserSettingsAsync()
	{
		Saved = false;

		UserProfileFlagsDTO updated = new()
		{
			Id = CurrentUser.Id,
			OptedOut = model.OptedOut
		};

		await UserService.SetUserProfileFlagsAsync(updated);
		Saved = true;
	}

	private async Task CopyTokenToClipboard()
	{
		await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", CurrentToken);
		copiedToken = true;
	}

	private async Task RenewSeedToken()
	{
		await UserService.RefreshSeedTokenAsync();
		NavigationManager.NavigateTo("/logout", true);
	}
}
