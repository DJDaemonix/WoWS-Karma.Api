@inject PostService PostService;
@inject ReplayService ReplayService;
@inject IConfiguration Configuration;

<div class="modal fade show" id="post-editor-modal" tabindex="-1" style="display:block" aria-modal="true" role="dialog">
	<div class="modal-dialog">
		<div class="modal-content">

			<!-- Modal Header -->
			<div class="modal-header">
				<h4 class="modal-title">Create Post</h4>
			</div>

			<EditForm Context="EditFormContext" Model="PostModel" OnValidSubmit="ModalSubmitAsync">
				<DataAnnotationsValidator />
				<ValidationSummary />

				<!-- Modal body -->
				<div class="modal-body">
					<div class="form-group mb-3">
						<label for="Title">Title</label>
						<InputText DisplayName=Title @bind-Value=PostModel.Title class="form-control" />
					</div>

					<div class="form-group my-3">
						<label for="Content">Content</label>
						<InputTextArea DisplayName=Content @bind-Value=PostModel.Content class="form-control" style="height:10rem; min-height:100px;" />
					</div>

					<hr class="m-3" />

					<div class="form-group">
						<h4 class="mb-2">Flairs</h4>

						<table class="table table-borderless table-sm">
							<tbody>
								<tr>
									<td>
										<div class="btn-group" role="group">
											<button type="button" class="btn btn-outline-danger @(PostFlairs.Performance is false ? "active" : "")" @onclick="() => { PostFlairs.Performance = false; }">Negative</button>
											<button type="button" class="btn btn-outline-warning @(PostFlairs.Performance is null ? "active" : "")" @onclick="() => { PostFlairs.Performance = null; }">Neutral</button>
											<button type="button" class="btn btn-outline-success @(PostFlairs.Performance is true ? "active" : "")" @onclick="() => { PostFlairs.Performance = true; }">Positive</button>
										</div>
									</td>
										
									<td class="align-middle"><h5 class="m-0">Performance</h5></td>
								</tr>
							
								<tr>
									<td>
										<div class="btn-group" role="group">
											<button type="button" class="btn btn-outline-danger @(PostFlairs.Teamplay is false ? "active" : "")" @onclick="() => { PostFlairs.Teamplay = false; }">Negative</button>
											<button type="button" class="btn btn-outline-warning @(PostFlairs.Teamplay is null ? "active" : "")" @onclick="() => { PostFlairs.Teamplay = null; }">Neutral</button>
											<button type="button" class="btn btn-outline-success @(PostFlairs.Teamplay is true ? "active" : "")" @onclick="() => { PostFlairs.Teamplay = true; }">Positive</button>
										</div>
									</td>
									
									<td class="align-middle"><h5 class="m-0">Teamplay</h5></td>
								</tr>

								<tr>
									<td>
										<div class="btn-group" role="group">
											<button type="button" class="btn btn-outline-danger @(PostFlairs.Courtesy is false ? "active" : "")" @onclick="() => { PostFlairs.Courtesy = false; }">Negative</button>
											<button type="button" class="btn btn-outline-warning @(PostFlairs.Courtesy is null ? "active" : "")" @onclick="() => { PostFlairs.Courtesy = null; }">Neutral</button>
											<button type="button" class="btn btn-outline-success @(PostFlairs.Courtesy is true ? "active" : "")" @onclick="() => { PostFlairs.Courtesy = true; }">Positive</button>
										</div>
									</td>
									
									<td class="align-middle"><h5 class="m-0">Courtesy</h5></td>
								</tr>
							</tbody>
						</table>
					</div>

					<div>
						<h4 class="mb-2">Replay File</h4>
						<InputFile OnChange=LoadFiles class="form-control" accept=".wowsreplay" placeholer="Choose Replay File..." />
					</div>
				</div>

				<!-- Modal footer -->
				<div class="modal-footer">
					@if (errored)
					{
						<div class="row">
							<div class="col">
								<p class="text-danger lead">An error occured while sumbitting this post. Please try again.</p>
							</div>
						</div>
					}
					
					<div class="row">
						<div class="col">
							<div class="form-check">
								<input class="form-check-input" type="checkbox" checked=@approvedGuidelines @onclick=OnApprovedGuidelinesToggle>

								<label class="form-check-label" for="flexCheckDefault">
									I hereby affirm to have read and followed the
									<a href="guidelines" target="_blank">Posting Guidelines</a>.
								</label>
							</div>
						</div>

						<div class="col-auto">
							<button type="button" class="btn btn-danger" @onclick=OnCancel>Cancel</button>
							<button type="submit" class="btn btn-success" value="Create" disabled=@(!canPost)>Create</button>
						</div>
					</div>
				</div>
			</EditForm>
		</div>
	</div>
</div>

<div class="modal-backdrop fade show"></div>


@code {
	[CascadingParameter] 
	private CircuitBreaker Breaker { get; set; } 

	[Parameter]
	public PlayerPostViewModel PostModel { get; set; }
	public PostFlairsParsed PostFlairs { get; set; }

	[Parameter]
	public EventCallback OnPostSubmited { get; set; }

	[Parameter]
	public EventCallback OnCancel { get; set; }

	private bool errored;
	private bool approvedGuidelines;
	private bool requireReplayForPost;

	private bool canPost => approvedGuidelines 
		&& (!requireReplayForPost 
			|| PostModel.ReplayFile is not null 
			|| PostFlairs is { Performance: null, Teamplay: null, Courtesy: null } or null
			|| PostModel.Id is not null);
	
	private string currentFile;


	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		PostFlairs = PostModel.Flairs.ParseFlairsEnum() ?? new();
		requireReplayForPost = Configuration.GetValue<bool>("SitePolicies:Posts:RequireReplayOnCreate");
	}

	private async Task ModalSubmitAsync()
	{
		try
		{
			errored = false;
			PostModel.Flairs = PostFlairs.ToEnum();

			if (PostModel.Id is null)
			{
				PostModel.Id = await PostService.SubmitNewPostAsync(PostModel.Adapt<PlayerPostDTO>(), PostModel.ReplayFile);
			}
			else
			{
				await PostService.EditPostAsync(PostModel.Adapt<PlayerPostDTO>());
			}
		
			await OnPostSubmited.InvokeAsync(null);
		}
		catch (Exception e)
		{
			errored = true;
			Breaker.ProcessError(e);
		}
	}

	private void LoadFiles(InputFileChangeEventArgs e)
	{
		PostModel.ReplayFile = e.File;
		currentFile = e.File.Name;
	}

	private void OnApprovedGuidelinesToggle() => approvedGuidelines = !approvedGuidelines;
}
