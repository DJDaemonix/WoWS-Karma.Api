@inherits ComponentBaseAuth
@implements IAsyncDisposable


@page "/posts"

@inject PostService PostService
@inject IConfiguration Configuration


<div class="row justify-content-between mb-5">
	<div class="col-auto">
		<h1>Latest Posts</h1>
	</div>

	<div class="col-auto">
		<div>
			<h3>Updates :</h3>

			@if (IsConnected)
			{
				<p class="lead text-success">Real-Time</p>
			}
			else
			{
				<p class="lead text-info">Press F5 to update</p>
			}
		</div>

		<div class="btn-group mr-2" role="group" aria-label="Select count">
			<button @onclick=@(() => RefreshListAsync(10)) type="button" class="btn btn-secondary">10</button>
			<button @onclick=@(() => RefreshListAsync(25)) type="button" class="btn btn-secondary">25</button>
			<button @onclick=@(() => RefreshListAsync(50)) type="button" class="btn btn-secondary">50</button>
			<button @onclick=@(() => RefreshListAsync(100)) type="button" class="btn btn-secondary">100</button>
		</div>
	</div>
</div>

<div>
	@if (Posts is null)
	{
		<h3 class="text-info">Loading Posts...</h3>
	}
	else
	{
		@if (Posts.Count() is 0)
		{
			<h4 class="text-warning mb-5">No Posts found.</h4>
		}
		else
		{
			<div class="row gx-2 gy-3">
				@foreach (PlayerPostDTO post in Posts)
				{
					<div class="col-lg-4 col-md-6">
						<Post PlayerPost=post DisplayType=Post.PostDisplayType.Neutral />
					</div>
				}
			</div>
		}
	}
</div>



@code {
	public LinkedList<PlayerPostDTO> Posts { get; set; }

	public bool Loaded { get; private set; }

	private HubConnection hubConnection;

	protected override async Task OnParametersSetAsync()
	{
		Loaded = false;
		await base.OnParametersSetAsync();
		Posts = new(await PostService.FetchLatestPostsAsync(10));
		Loaded = true;

		hubConnection = new HubConnectionBuilder()
			.WithAutomaticReconnect()
			.WithUrl(Configuration[$"Api:{CurrentRegion}:PostHub"], options =>
			{
				options.AccessTokenProvider = () => Task.FromResult(CurrentToken);
			})
			.Build();

		SetupEvents();
		await hubConnection.StartAsync();
	}

	public async Task RefreshListAsync(int count)
	{
		Loaded = false;
		Posts = new(await PostService.FetchLatestPostsAsync(count));
		Loaded = true;
	}

	public bool IsConnected => hubConnection?.State is HubConnectionState.Connected;

	public async ValueTask DisposeAsync()
	{
		await hubConnection.DisposeAsync();
	}

	public void SetupEvents()
	{
		hubConnection.On<PlayerPostDTO>(nameof(IPostHubPush.NewPost), (post) =>
		{
			Posts.AddFirst(post);
			StateHasChanged();
		});

		hubConnection.On<PlayerPostDTO>(nameof(IPostHubPush.EditedPost), (edited) =>
		{
			if (Posts.FirstOrDefault(p => p.Id == edited.Id) is PlayerPostDTO current)
			{
				Posts.Find(current).ValueRef = current with
				{
					Title = edited.Title,
					Content = edited.Content,
					Flairs = edited.Flairs,
					UpdatedAt = edited.UpdatedAt
				};

				StateHasChanged();
			}
		});

		hubConnection.On<Guid>(nameof(IPostHubPush.DeletedPost), (deletedId) =>
		{
			if (Posts.FirstOrDefault(p => p.Id == deletedId) is PlayerPostDTO current)
			{
				Posts.Remove(current);
				StateHasChanged();
			}
		});
	}
}
