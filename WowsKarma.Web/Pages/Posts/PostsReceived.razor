@inherits ComponentBaseAuth

@using WowsKarma.Common.Models
@using WowsKarma.Web.Services.Api
@using static WowsKarma.Common.Models.PostFlairsUtils

@inject PostClient PostClient
@inject NavigationManager NavigationManager


@if (Loaded)
{
	<div class="row justify-content-between align-content-end">
		<div class="col-auto mb-3">
			<AuthorizeView>
				<Authorized>
					@if (AuthorProfileFlags.PostsBanned)
					{
						<h5 class="text-danger">You were banned from posting.</h5>
					}
					else if (AuthorProfileFlags.OptedOut)
					{
						<h5 class="text-danger">You have opted out of WOWS Karma.</h5>
					}
					else if (AccountId == CurrentUser.Id)
					{
						<h5 class="text-info">You cannot self-post.</h5>
					}
					else if (CheckCooldown() is { OnCooldown: true } postCooldown)
					{
						<h5 class="text-info">You may post again for this Player after @postCooldown.EndsAt.ToString("dd/MM/yyyy @ HH:mm").</h5>
					}
					else
					{
						<button class="btn btn-success px-4" @onclick=CreatePost>New Post</button>
					}
				</Authorized>
				<NotAuthorized>
					@{ string redirectUri = NavigationManager.ToBaseRelativePath(NavigationManager.Uri); }
					<h5 class="text-warning">You must first <a href=@($"/login?redirectUri={redirectUri}")>login</a> before creating a Post.</h5>
				</NotAuthorized>
			</AuthorizeView>
		</div>
	</div>

	@if (PlayerPosts is null || PlayerPosts.Count() is 0)
	{
		<h4 class="text-warning mb-5">No Posts found for this Player.</h4>
	}
	else
	{
		<div class="row gx-2 gy-3">
			@foreach (PlayerPostDTO post in PlayerPosts)
			{
				<div class="col-lg-4 col-md-6">
					<Post Editable @key=post.Id PlayerPost=post DisplayType=Post.PostDisplayType.Received CurrentUserId=CurrentUser.Id
						OnEditClick="() => EditPost(post)"
						OnDeleteClick="() => InitDeleteModal(post.Id.Value)"
					/>
				</div>

			}
		</div>
	}

	@if (showEditorModal)
	{
		<EditorModal PostModel=currentEditorPost OnPostSubmited=EditorModalSubmitAsync OnCancel=EditorModalCancel />
	}
	else if (showDeleteModal)
	{
		<DeleteConfirm OnConfirm=DeleteModalSubmitAsync OnCancel=DeleteModalCancel />
	}
}
else
{
	<h3 class="text-info">Loading Posts...</h3>
}



@code
{
	public static readonly TimeSpan CooldownPeriod = TimeSpan.FromDays(1);


	[Parameter]
	public uint AccountId { get; set; }

	[Parameter]
	public UserProfileFlagsDTO AuthorProfileFlags { get; set; }

	[Parameter]
	public EventCallback OnPostsUpdate { get; set; }

	public IEnumerable<PlayerPostDTO> PlayerPosts { get; set; }

	public bool Loaded { get; private set; }
	private bool showEditorModal, showDeleteModal;

	private PlayerPostViewModel currentEditorPost;
	private Guid currentDeleteId;

	public record PostCooldownDTO(bool OnCooldown, DateTimeOffset EndsAt);


	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();

		PlayerPosts = await PostClient.FetchReceivedPostsAsync(AccountId, 0);

		Loaded = true;
	}

	private void CreatePost()
	{
		currentEditorPost = new()
		{
			PlayerId = AccountId,
			AuthorId = CurrentUser.Id
		};
		showEditorModal = true;
	}

	private void EditPost(PlayerPostDTO post)
	{
		currentEditorPost = post;
		showEditorModal = true;
	}

	public async Task UpdatePostsAsync()
	{
		PlayerPosts = await PostClient.FetchReceivedPostsAsync(AccountId, 0);
		await OnPostsUpdate.InvokeAsync();
	}

	private void EditorModalCancel() => showEditorModal = false;
	private async Task EditorModalSubmitAsync()
	{
		showEditorModal = false;
		currentEditorPost = null;
		await UpdatePostsAsync();
	}


	private void InitDeleteModal(Guid postId)
	{
		currentDeleteId = postId;
		showDeleteModal = true;
	}
	private void DeleteModalCancel() => showDeleteModal = false;
	private async Task DeleteModalSubmitAsync()
	{
		showDeleteModal = false;
		await PostClient.DeletePostAsync(currentDeleteId);
		await UpdatePostsAsync();
	}

	private PostCooldownDTO CheckCooldown()
	{
		PlayerPostDTO lastAuthoredPost = (from p in PlayerPosts where p.Author.Id == CurrentUser.Id orderby p.CreatedAt select p)?.LastOrDefault();

		if (lastAuthoredPost is { CreatedAt: not null })
		{
			DateTimeOffset endsAt = lastAuthoredPost.CreatedAt.Value.Add(CooldownPeriod);
			bool onCooldown = endsAt > DateTime.UtcNow;

			return new(onCooldown, endsAt);
		}

		return new(false, default);
	}
}
