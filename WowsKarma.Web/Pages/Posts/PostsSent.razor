@inherits ComponentBaseAuth

@using WowsKarma.Common.Models
@using WowsKarma.Web.Services.Api
@using static WowsKarma.Common.Models.PostFlairsUtils

@inject PostClient PostClient
@inject NavigationManager NavigationManager


@if (Loaded)
{
	@if (PlayerPosts is null || PlayerPosts.Count() is 0)
	{
		<h4 class="text-warning mb-5">No Posts sent by this Player.</h4>
	}
	else
	{
		<div class="row gx-2 gy-3">
			@foreach (PlayerPostDTO post in PlayerPosts)
			{
				<div class="col-lg-4">
					<Post Editable @key=post.Id PlayerPost=post DisplayType=Post.PostDisplayType.Sent CurrentUserId=CurrentUser.Id
						OnEditClick="() => EditPost(post)"
						OnDeleteClick="() => InitDeleteModal(post.Id.Value)"
					/>
				</div>
			}
		</div>
		@if (showEditorModal)
		{
			<EditorModal PostModel=currentEditorPost OnPostSubmited=EditorModalSubmitAsync OnCancel=EditorModalCancel />
		}
		else if (showDeleteModal)
		{
			<DeleteConfirm OnConfirm=DeleteModalSubmitAsync OnCancel=DeleteModalCancel />
		}
	}

}
else
{
	<h3 class="text-info">Loading Posts...</h3>
}



@code
{
	[Parameter]
	public uint AccountId { get; set; }

	public IEnumerable<PlayerPostDTO> PlayerPosts { get; set; }

	public bool Loaded { get; private set; }

	private bool showEditorModal = false;
	private bool showDeleteModal = false;

	private PlayerPostViewModel currentEditorPost;
	private Guid currentDeleteId;


	protected override async Task OnParametersSetAsync()
	{
		await UpdatePostsAsync();
		await base.OnParametersSetAsync();

		Loaded = true;
	}

	private void EditPost(PlayerPostDTO post)
	{
		currentEditorPost = post;

		showEditorModal = true;
	}

	public async Task UpdatePostsAsync()
	{
		PlayerPosts = await PostClient.FetchSentPostsAsync(AccountId, 0);
	}

	private void EditorModalCancel() => showEditorModal = false;
	private async Task EditorModalSubmitAsync()
	{
		showEditorModal = false;
		currentEditorPost = null;
		await UpdatePostsAsync();
	}


	private void InitDeleteModal(Guid postId)
	{
		currentDeleteId = postId;
		showDeleteModal = true;
	}
	private void DeleteModalCancel() => showDeleteModal = false;
	private async Task DeleteModalSubmitAsync()
	{
		showDeleteModal = false;
		await PostClient.DeletePostAsync(currentDeleteId);
		await UpdatePostsAsync();
	}
}
