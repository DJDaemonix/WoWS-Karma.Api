@page "/posts/view/{Id:guid}"
@inherits ComponentBaseAuth

@inject PostService PostService
@inject ModService ModService
@inject NavigationManager NavigationManager

@if (!Loaded)
{
	<h3 class="text-info">Loading...</h3>
}
else if (post is null)
{
	<h3 class="text-warning">Post not found.</h3>
}
else
{
	<h1>View Post</h1>
	<p class="lead">Post ID : <span class="ml-3 text-monospace">@Id</span></p>


	<div class="my-5">
		<Post Editable PlayerPost=post DisplayType=Post.PostDisplayType.Neutral CurrentUserId=CurrentUser.Id
			  OnEditClick=EditorModalInit
			  OnDeleteClick=DeleteModalInit
		/>
	</div>

	@if (post.ModLocked)
	{
		<div class="mb-5">
			<h4>Mod Action</h4>
			<p class="text-warning lead">This post was Locked by our Community Managers, and publicly removed from the platform.</p>

			<div class="col-auto">
				<table class="table table-borderless">
					<thead />

					<tbody>
						<AuthorizeView>
							<Authorized>
								<tr><th>Mod Action ID</th><td>@lastModAction?.Id</td></tr>
							</Authorized>
						</AuthorizeView>

						<tr><th>Removed by</th><td>@lastModAction?.ModUsername</td></tr>
						<tr><th>Reason</th><td>@lastModAction?.Reason</td></tr>
					</tbody>
				</table>
			</div>
		</div>
	}

	@if (showEditorModal)
	{
		<EditorModal PostModel=post OnPostSubmited=EditorModalSubmit OnCancel=EditorModalCancel />
	}
	else if (showDeleteModal)
	{
		<DeleteConfirm OnConfirm=DeleteModalSubmitAsync OnCancel=DeleteModalCancel />
	}
}


@code {
	[Parameter] public Guid Id { get; set; }

	public bool Loaded { get; private set; }

	private PlayerPostDTO post;
	private PostModActionDTO lastModAction;

	private bool showEditorModal = false;
	private bool showDeleteModal = false;

	protected override async Task OnParametersSetAsync()
	{
		Loaded = false;

		await base.OnParametersSetAsync();
		post = await PostService.FetchPostAsync(Id);

		if (post is not null && post.ModLocked)
		{
			lastModAction = (await ModService.GetPostModActionsAsync((Guid)post.Id)).Last();
		}

		Loaded = true;
	}

	private void EditorModalInit() => showEditorModal = true;
	private void EditorModalCancel() => showEditorModal = false;
	private async Task EditorModalSubmit()
	{
		showEditorModal = false;
		lastModAction = (await ModService.GetPostModActionsAsync((Guid)post.Id)).Last();
	}

	private void DeleteModalInit() => showDeleteModal = true;
	private void DeleteModalCancel() => showDeleteModal = false;

	private async Task DeleteModalSubmitAsync()
	{
		showDeleteModal = false;
		await PostService.DeletePostAsync(Id);
		NavigationManager.NavigateTo("/");
	}
}
