@using WowsKarma.Web.Services.Api
@inject ModClient ModClient

<div class="m-2 vstack" id=@PlayerPost.Id>
	@if (DisplayType is PostDisplayType.Neutral)
	{
		<p class="text-body ms-1">
			@if (PlayerPost.Author.Clan is { } authorClan)
            {
	            <a class="me-1" style="color: #@authorClan.LeagueColorHex;" 
		            href=@($"/clan/{authorClan.Id},{authorClan.Tag}-{authorClan.Name}") 
		            tooltip="@authorClan.Name">[@authorClan.Tag]</a>
            }
			
			<NavLink href=@($"/player/{PlayerPost.Author.Id},{PlayerPost.Author.Username}")>@PlayerPost.Author.Username</NavLink>
			>
			
			@if (PlayerPost.Player.Clan is { } playerClan)
            {
	            <a class="me-1" style="color: #@playerClan.LeagueColorHex;" 
		            href=@($"/clan/{playerClan.Id},{playerClan.Tag}-{playerClan.Name}") 
		            tooltip="@playerClan.Name">[@playerClan.Tag]</a>
            }
			<NavLink href=@($"/player/{PlayerPost.Player.Id},{PlayerPost.Player.Username}")>@PlayerPost.Player.Username</NavLink>
		</p>
	}

	<div class="card post-card border-@GetPostBorderColor(PlayerPost.Flairs)">

		<div class="card-header">
			<h5 class="my-2">@PlayerPost.Title</h5>
		</div>

		<div class="card-body">
			<p class="card-text" style="white-space: pre-wrap;">@PlayerPost.Content</p>
		</div>

		<div class="card-body py-0 my-1" style="line-height:normal">
			<div class="row justify-content-between align-items-end">
				<div class="col-auto">
					@{ PostFlairsParsed parsed = PlayerPost.Flairs.ParseFlairsEnum() ?? new(); }

					@GetFlairMarkup("Performance", parsed.Performance)
					@GetFlairMarkup("Teamplay", parsed.Teamplay)
					@GetFlairMarkup("Courtesy", parsed.Courtesy)
				</div>

				<div class="col-auto px-1">
					@if (PlayerPost.ModLocked)
					{
						<i class="bi bi-x-circle text-danger lead mx-1"></i>
					}

					@if (PlayerPost.ReplayId is not null)
					{
						<NavLink class="text-body" href=@($"/posts/view/{PlayerPost.Id}")>
							<i class="bi bi-camera-video text-success lead mx-1"></i>
						</NavLink>
					}
					else
					{
						<i class="bi bi-camera-video-off text-danger lead mx-1"></i>
					}

					<NavLink class="text-body" href=@($"/posts/view/{PlayerPost.Id}")>
						<i class="bi bi-link-45deg lead"></i>
					</NavLink>
				</div>
			</div>
		</div>

		<div class="card-footer">
			<p class="blockquote-footer my-1">
				@if (DisplayType is PostDisplayType.Received)
				{
					<span>
						From
						
						@if (PlayerPost.Author.Clan is { } clan)
						{
							<a class="me-1" style="color: #@clan.LeagueColorHex;" href=@($"/clan/{clan.Id},{clan.Tag}-{clan.Name}") tooltip="@clan.Name">[@clan.Tag]</a>
						}

						<NavLink href=@($"/player/{PlayerPost.Author.Id},{PlayerPost.Author.Username}")>@PlayerPost.Author.Username</NavLink>,
					</span>
				}
				else if (DisplayType is PostDisplayType.Sent)
				{
					<span>
						To
						
						@if (PlayerPost.Player.Clan is { } clan)
                        {
                        	<a class="me-1" style="color: #@clan.LeagueColorHex;" href=@($"/clan/{clan.Id},{clan.Tag}-{clan.Name}") tooltip="@clan.Name">[@clan.Tag]</a>
                        }
						
						<NavLink href=@($"/player/{PlayerPost.Player.Id},{PlayerPost.Player.Username}")>@PlayerPost.Player.Username</NavLink>,
					</span>
				}

				@PlayerPost.CreatedAt.Value.ToString("dd/MM/yyyy @ HH:mm UTC")
			</p>

			<p class="my-1">
				<AuthorizeView>
					<Authorized>
						@if (PlayerPost.Author.Id == CurrentUserId && !PlayerPost.ModLocked)
						{
							if (!PlayerPost.ReadOnly)
							{
								<button class="btn btn-warning btn-sm" @onclick=EditClicked>Edit</button>
							}
							
							<button class="btn btn-danger btn-sm" @onclick=DeleteClicked>Delete</button>
						}
					</Authorized>
				</AuthorizeView>

				<AuthorizeView Roles=@ApiRoles.CM>
					<Authorized>
						@if (!PlayerPost.ModLocked)
						{
							<button class="btn btn-outline-danger btn-sm" @onclick=ModDeleteClicked>Mod Delete</button>

							<ModDeleteModal @ref=ModDeleteModal
								OnSubmit=OnModDeleteSubmit
								OnCancel="() => ModDeleteModal.Show = false"
							/>
						}
					</Authorized>
				</AuthorizeView>
			</p>
		</div>
	</div>
</div>

@code {
	[Parameter] public PlayerPostDTO PlayerPost { get; init; }
	[Parameter] public PostDisplayType DisplayType { get; init; }

	[Parameter] public bool Editable { get; init; }
	[Parameter] public uint CurrentUserId { get; init; }
	[Parameter] public EventCallback<PlayerPostDTO> OnEditClick { get; init; }
	[Parameter] public EventCallback<Guid> OnDeleteClick { get; init; }

	private ModDeleteModal ModDeleteModal = new();

	private MarkupString GetFlairMarkup(string name, bool? value) => value is { } x
		? new($"<small class=\"my-0 text-{(x ? "success" : "danger")}\">{(x ? "+" : "-")} {name}</small> <br />")
		: new(string.Empty);

	private Task EditClicked() => OnEditClick.InvokeAsync(PlayerPost);
	private Task DeleteClicked() => OnDeleteClick.InvokeAsync(PlayerPost.Id.Value);
	private void ModDeleteClicked() => ModDeleteModal.Show = true;

	private async Task OnModDeleteSubmit(ModDeleteModal.ParametersModel parametersModel)
	{
		if (!ModDeleteModal.Sent)
		{
			ModDeleteModal.Show = false;
			ModDeleteModal.Sent = true;
			await ModClient.DeletePostAsync(PlayerPost.Id ?? new(), parametersModel.Reason);

		}
	}

	public enum PostDisplayType
	{
		Neutral,
		Received,
		Sent
	}
}